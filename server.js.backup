const http = require('http');
const fs = require('fs');
const path = require('path');

const PORT = process.env.PORT || 3000;

// Function to create server (makes it testable)
function createServer(productsFilePath) {
  const PRODUCTS_FILE = productsFilePath || path.join(__dirname, 'products.json');

  // Ensure products file exists
  if (!fs.existsSync(PRODUCTS_FILE)) {
    const initialProducts = [
      {
        id: 1,
        name: "Sample Product 1",
        price: 29.99,
        description: "A sample product for testing"
      },
      {
        id: 2,
        name: "Sample Product 2", 
        price: 49.99,
        description: "Another sample product for testing"
      }
    ];
    fs.writeFileSync(PRODUCTS_FILE, JSON.stringify(initialProducts, null, 2));
  }

  const server = http.createServer((req, res) => {
    const { method, url } = req;

    // Add CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    // Handle preflight requests
    if (method === 'OPTIONS') {
      res.statusCode = 200;
      res.end();
      return;
    }

    try {
      if (method === 'GET' && url === '/products') {
        // GET /products: Retrieve a list of all products
        const products = JSON.parse(fs.readFileSync(PRODUCTS_FILE, 'utf-8'));
        res.statusCode = 200;
        res.setHeader('Content-Type', 'application/json');
        res.end(JSON.stringify(products));
      } else if (method === 'GET' && url.startsWith('/products/')) {
        // GET /products/:id: Retrieve a specific product by its ID
        const id = parseInt(url.split('/')[2], 10);
        const products = JSON.parse(fs.readFileSync(PRODUCTS_FILE, 'utf-8'));
        const product = products.find(p => p.id === id);

        if (product) {
          res.statusCode = 200;
          res.setHeader('Content-Type', 'application/json');
          res.end(JSON.stringify(product));
        } else {
          res.statusCode = 404;
          res.end(`Product with ID ${id} not found`);
        }
      } else if (method === 'POST' && url === '/products') {
        // POST /products: Create a new product
        let body = '';
        req.on('data', chunk => {
          body += chunk.toString();
        });

        req.on('end', () => {
          const newProduct = JSON.parse(body);
          const products = JSON.parse(fs.readFileSync(PRODUCTS_FILE, 'utf-8'));
          newProduct.id = products.length > 0 ? Math.max(...products.map(p => p.id)) + 1 : 1;
          products.push(newProduct);

          fs.writeFileSync(PRODUCTS_FILE, JSON.stringify(products, null, 2));

          res.statusCode = 201;
          res.setHeader('Content-Type', 'application/json');
          res.end(JSON.stringify(newProduct));
        });
      } else if (method === 'PUT' && url.startsWith('/products/')) {
        // PUT /products/:id: Update an existing product by its ID
        const id = parseInt(url.split('/')[2], 10);
        let body = '';
        req.on('data', chunk => {
          body += chunk.toString();
        });

        req.on('end', () => {
          const updatedProduct = JSON.parse(body);
          const products = JSON.parse(fs.readFileSync(PRODUCTS_FILE, 'utf-8'));
          const index = products.findIndex(p => p.id === id);

          if (index !== -1) {
            products[index] = { ...updatedProduct, id };
            fs.writeFileSync(PRODUCTS_FILE, JSON.stringify(products, null, 2));
            res.statusCode = 200;
            res.setHeader('Content-Type', 'application/json');
            res.end(JSON.stringify(products[index]));
          } else {
            res.statusCode = 404;
            res.end(`Product with ID ${id} not found`);
          }
        });
      } else if (method === 'PATCH' && url.startsWith('/products/')) {
        // PATCH /products/:id: Partial update of an existing product by its ID
        const id = parseInt(url.split('/')[2], 10);
        let body = '';
        req.on('data', chunk => {
          body += chunk.toString();
        });

        req.on('end', () => {
          const updatedFields = JSON.parse(body);
          const products = JSON.parse(fs.readFileSync(PRODUCTS_FILE, 'utf-8'));
          const index = products.findIndex(p => p.id === id);

          if (index !== -1) {
            const updatedProduct = { ...products[index], ...updatedFields };
            products[index] = updatedProduct;
            fs.writeFileSync(PRODUCTS_FILE, JSON.stringify(products, null, 2));
            res.statusCode = 200;
            res.setHeader('Content-Type', 'application/json');
            res.end(JSON.stringify(updatedProduct));
          } else {
            res.statusCode = 404;
            res.end(`Product with ID ${id} not found`);
          }
        });
      } else if (method === 'DELETE' && url.startsWith('/products/')) {
        // DELETE /products/:id: Delete a product by its ID
        const id = parseInt(url.split('/')[2], 10);
        const products = JSON.parse(fs.readFileSync(PRODUCTS_FILE, 'utf-8'));
        const index = products.findIndex(p => p.id === id);

        if (index !== -1) {
          products.splice(index, 1);
          fs.writeFileSync(PRODUCTS_FILE, JSON.stringify(products, null, 2));
          res.statusCode = 200;
          res.end(`Product with ID ${id} deleted successfully`);
        } else {
          res.statusCode = 404;
          res.end(`Product with ID ${id} not found`);
        }
      } else if (method === 'GET' && url === '/') {
        // Health check endpoint
        res.statusCode = 200;
        res.setHeader('Content-Type', 'application/json');
        res.end(JSON.stringify({ 
          message: 'Products API is running!', 
          endpoints: ['/products', '/products/:id'],
          timestamp: new Date().toISOString()
        }));
      } else {
        res.statusCode = 404;
        res.end('Tenzey cannot understand');
      }
    } catch (err) {
      console.error('Server Error:', err);
      res.statusCode = 500;
      res.end('Internal Server Error');
    }
  });

  return server;
}

// Only start server if this file is run directly (not during testing)
if (require.main === module) {
  const server = createServer();
  server.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
    console.log('Available endpoints:');
    console.log('  GET    /products     - Get all products');
    console.log('  GET    /products/:id - Get product by ID');
    console.log('  POST   /products     - Create new product');
    console.log('  PUT    /products/:id - Update product');
    console.log('  PATCH  /products/:id - Partial update product');
    console.log('  DELETE /products/:id - Delete product');
  });
}

// Export for testing
module.exports = createServer;